{"ast":null,"code":"var _jsxFileName = \"/home/luisffg/Projetos/sd-012-project-trivia-react-redux/src/components/QuestionInfo.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport UniqueButton from './UniqueButton';\nimport Button from './Button';\nimport { scorePlayer } from '../redux/actions';\nimport './questioninfo.css';\nconst ANSWERED_QUESTION = 'Respondida!';\n\nclass QuestionInfo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: 0,\n      seconds: 30,\n      disabled: false\n    };\n    this.changeButtonVisibility = this.changeButtonVisibility.bind(this);\n    this.resetQuestions = this.resetQuestions.bind(this);\n    this.count = this.count.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n    this.answeredQuestion = this.answeredQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    this.count();\n  }\n\n  count() {\n    const sec = 1000;\n    const interval = setInterval(() => {\n      const {\n        seconds\n      } = this.state;\n      this.setState({\n        seconds: seconds - 1\n      });\n\n      if (seconds === 1) {\n        clearInterval(interval);\n        this.setState({\n          seconds: 'Time\\'s Up',\n          disabled: true\n        });\n      } else if (seconds === ANSWERED_QUESTION) {\n        clearInterval(interval);\n        this.setState({\n          seconds: ANSWERED_QUESTION\n        });\n      }\n    }, sec);\n  }\n\n  changeButtonVisibility() {\n    const buttonNextQuestion = document.getElementsByClassName('btn-next')[0];\n    buttonNextQuestion.classList.add('visible');\n    const correct = document.getElementById('correct-answer');\n    const incorrect = document.getElementsByName('incorrect-answer');\n    incorrect.forEach(question => {\n      question.className += ' questionWrong';\n    });\n    correct.className += ' questionCorrect';\n  }\n\n  resetQuestions() {\n    const correct = document.getElementById('correct-answer');\n    const incorrect = document.getElementsByName('incorrect-answer');\n    incorrect.forEach(question => question.classList.remove('questionWrong'));\n    correct.classList.remove('questionCorrect');\n    this.setState(p => ({\n      index: p.index + 1\n    }));\n  }\n\n  answeredQuestion() {\n    this.setState({\n      seconds: ANSWERED_QUESTION\n    });\n  }\n\n  resetTimer() {\n    this.setState({\n      seconds: 30\n    });\n  }\n\n  sumUserPoints() {\n    const basePoints = 10;\n    const {\n      questions,\n      addScore\n    } = this.props;\n    const {\n      seconds,\n      index\n    } = this.state;\n\n    const difficultyMultiplier = () => {\n      if (questions[index].difficulty === 'easy') {\n        return 1;\n      }\n\n      if (questions[index].difficulty === 'medium') {\n        return 2;\n      }\n\n      if (questions[index].difficulty === 'hard') {\n        const hardMultiplier = 3;\n        return hardMultiplier;\n      }\n    };\n\n    const points = basePoints + seconds * difficultyMultiplier();\n    const locals = JSON.parse(localStorage.getItem('state'));\n    localStorage.setItem('state', JSON.stringify({\n      player: { ...locals.player,\n        assertions: locals.player.assertions + 1,\n        score: locals.player.score + points\n      }\n    }));\n    addScore(locals.player.score + points);\n  }\n\n  renderQuestions() {\n    const {\n      questions\n    } = this.props;\n    const {\n      index\n    } = this.state;\n    const {\n      question\n    } = questions[index];\n    const fixedQuestion = question.replace(/&quot;/gi, '').replace(/&#039;/gi, '').replace(/&eacute/gi, '').replace(/&amp/gi, '');\n    return fixedQuestion;\n  }\n\n  render() {\n    const {\n      index,\n      seconds,\n      disabled\n    } = this.state;\n    const {\n      questions\n    } = this.props;\n    const finalQuestion = 5;\n    if (index === finalQuestion) return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 41\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"timer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 32\n      }\n    }, seconds)), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"question-category\",\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }\n    }, \"Category:\"), `${questions[index].category}`), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      className: \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    }, \"Question:\"), `${this.renderQuestions()}`), /*#__PURE__*/React.createElement(UniqueButton, {\n      disabled: disabled,\n      className: \"correct-answer\",\n      onClick: () => {\n        this.changeButtonVisibility();\n        this.sumUserPoints();\n        this.answeredQuestion();\n      },\n      innerText: questions[index].correct_answer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }), questions[index].incorrect_answers.map((incorrect, i) => /*#__PURE__*/React.createElement(Button, {\n      className: \"incorrect-answer\",\n      key: i,\n      dataTestId: `wrong-answer-${i}`,\n      onClick: () => {\n        this.changeButtonVisibility();\n        this.answeredQuestion();\n      },\n      innerText: incorrect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(UniqueButton, {\n      className: \"btn-next\",\n      innerText: \"PR\\xD3XIMA\",\n      onClick: () => {\n        this.resetQuestions();\n        this.resetTimer();\n        this.count();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  addScore: score => dispatch(scorePlayer(score))\n});\n\nQuestionInfo.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  addScore: PropTypes.func.isRequired\n};\nexport default connect(null, mapDispatchToProps)(QuestionInfo);","map":{"version":3,"sources":["/home/luisffg/Projetos/sd-012-project-trivia-react-redux/src/components/QuestionInfo.js"],"names":["React","Component","PropTypes","Redirect","connect","UniqueButton","Button","scorePlayer","ANSWERED_QUESTION","QuestionInfo","constructor","props","state","index","seconds","disabled","changeButtonVisibility","bind","resetQuestions","count","resetTimer","answeredQuestion","componentDidMount","sec","interval","setInterval","setState","clearInterval","buttonNextQuestion","document","getElementsByClassName","classList","add","correct","getElementById","incorrect","getElementsByName","forEach","question","className","remove","p","sumUserPoints","basePoints","questions","addScore","difficultyMultiplier","difficulty","hardMultiplier","points","locals","JSON","parse","localStorage","getItem","setItem","stringify","player","assertions","score","renderQuestions","fixedQuestion","replace","render","finalQuestion","category","correct_answer","incorrect_answers","map","i","mapDispatchToProps","dispatch","propTypes","arrayOf","object","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport UniqueButton from './UniqueButton';\nimport Button from './Button';\nimport { scorePlayer } from '../redux/actions';\nimport './questioninfo.css';\n\nconst ANSWERED_QUESTION = 'Respondida!';\n\nclass QuestionInfo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      index: 0,\n      seconds: 30,\n      disabled: false,\n    };\n\n    this.changeButtonVisibility = this.changeButtonVisibility.bind(this);\n    this.resetQuestions = this.resetQuestions.bind(this);\n    this.count = this.count.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n    this.answeredQuestion = this.answeredQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    this.count();\n  }\n\n  count() {\n    const sec = 1000;\n    const interval = setInterval(() => {\n      const { seconds } = this.state;\n      this.setState({\n        seconds: seconds - 1,\n      });\n      if (seconds === 1) {\n        clearInterval(interval);\n        this.setState({\n          seconds: 'Time\\'s Up',\n          disabled: true,\n        });\n      } else if (seconds === ANSWERED_QUESTION) {\n        clearInterval(interval);\n        this.setState({\n          seconds: ANSWERED_QUESTION,\n        });\n      }\n    }, sec);\n  }\n\n  changeButtonVisibility() {\n    const buttonNextQuestion = document.getElementsByClassName('btn-next')[0];\n    buttonNextQuestion.classList.add('visible');\n    const correct = document.getElementById('correct-answer');\n    const incorrect = document.getElementsByName('incorrect-answer');\n    incorrect.forEach((question) => { question.className += ' questionWrong'; });\n    correct.className += ' questionCorrect';\n  }\n\n  resetQuestions() {\n    const correct = document.getElementById('correct-answer');\n    const incorrect = document.getElementsByName('incorrect-answer');\n    incorrect.forEach((question) => question.classList.remove('questionWrong'));\n    correct.classList.remove('questionCorrect');\n    this.setState((p) => ({ index: p.index + 1 }));\n  }\n\n  answeredQuestion() {\n    this.setState({\n      seconds: ANSWERED_QUESTION,\n    });\n  }\n\n  resetTimer() {\n    this.setState({\n      seconds: 30,\n    });\n  }\n\n  sumUserPoints() {\n    const basePoints = 10;\n    const { questions, addScore } = this.props;\n    const { seconds, index } = this.state;\n    const difficultyMultiplier = () => {\n      if (questions[index].difficulty === 'easy') {\n        return 1;\n      }\n      if (questions[index].difficulty === 'medium') {\n        return 2;\n      }\n      if (questions[index].difficulty === 'hard') {\n        const hardMultiplier = 3;\n        return hardMultiplier;\n      }\n    };\n    const points = basePoints + (seconds * difficultyMultiplier());\n    const locals = JSON.parse(localStorage.getItem('state'));\n    localStorage.setItem('state', JSON.stringify({\n      player: {\n        ...locals.player,\n        assertions:\n        locals.player.assertions + 1,\n        score: locals.player.score + points } }));\n    addScore(locals.player.score + points);\n  }\n\n  renderQuestions() {\n    const { questions } = this.props;\n    const { index } = this.state;\n    const { question } = questions[index];\n    const fixedQuestion = question\n      .replace(/&quot;/gi, '')\n      .replace(/&#039;/gi, '')\n      .replace(/&eacute/gi, '')\n      .replace(/&amp/gi, '');\n    return fixedQuestion;\n  }\n\n  render() {\n    const { index, seconds, disabled } = this.state;\n    const { questions } = this.props;\n    const finalQuestion = 5;\n    if (index === finalQuestion) return <Redirect to=\"/feedback\" />;\n    return (\n      <div className=\"question-container\">\n        <div className=\"timer\"><span>{seconds}</span></div>\n        <p className=\"question-category\" data-testid=\"question-category\">\n          <span className=\"category\">Category:</span>\n          {`${questions[index].category}`}\n        </p>\n        <p data-testid=\"question-text\" className=\"question-text\">\n          <span className=\"question\">Question:</span>\n          {`${this.renderQuestions()}`}\n        </p>\n        <UniqueButton\n          disabled={ disabled }\n          className=\"correct-answer\"\n          onClick={ () => {\n            this.changeButtonVisibility();\n            this.sumUserPoints();\n            this.answeredQuestion();\n          } }\n          innerText={ questions[index].correct_answer }\n        />\n        {questions[index].incorrect_answers.map((incorrect, i) => (\n          <Button\n            className=\"incorrect-answer\"\n            key={ i }\n            dataTestId={ `wrong-answer-${i}` }\n            onClick={ () => {\n              this.changeButtonVisibility();\n              this.answeredQuestion();\n            } }\n            innerText={ incorrect }\n          />))}\n        <UniqueButton\n          className=\"btn-next\"\n          innerText=\"PRÓXIMA\"\n          onClick={ () => {\n            this.resetQuestions();\n            this.resetTimer();\n            this.count();\n          } }\n        />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  addScore: (score) => dispatch(scorePlayer(score)),\n});\n\nQuestionInfo.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  addScore: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(QuestionInfo);\n"]},"metadata":{},"sourceType":"module"}