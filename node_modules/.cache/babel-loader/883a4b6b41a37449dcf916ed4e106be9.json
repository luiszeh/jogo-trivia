{"ast":null,"code":"export const REQUEST_TOKEN = 'REQUEST_TOKEN';\nexport const REQUEST_TOKEN_SUCCESS = 'REQUEST_TOKEN_SUCCESS';\nexport const REQUEST_TOKEN_ERROR = 'REQUEST_TOKEN_ERROR';\nexport const REQUEST_QUESTIONS = 'REQUEST_QUESTIONS';\nexport const REQUEST_QUESTIONS_SUCCESS = 'REQUEST_QUESTIONS_SUCCESS';\nexport const REQUEST_QUESTIONS_ERROR = 'REQUEST_QUESTIONS_ERROR';\nexport const requestToken = () => ({\n  type: REQUEST_TOKEN\n});\nexport const requestTokenSuccess = value => ({\n  type: REQUEST_TOKEN_SUCCESS,\n  payload: value\n});\nexport const requestTokenError = error => ({\n  type: REQUEST_TOKEN_ERROR,\n  payload: error\n});\nexport const requestQuestions = () => ({\n  type: REQUEST_QUESTIONS\n});\nexport const requestQuestionsSuccess = value => ({\n  type: REQUEST_QUESTIONS_SUCCESS,\n  payload: value\n});\nexport const requestQuestionsError = error => ({\n  type: REQUEST_QUESTIONS_ERROR,\n  payload: error\n});\nconst END_POINT = 'https://opentdb.com/api_token.php?command=request'; // Solução proposta pelo Rodrigo Merlone - Turma 12\n\nexport const fetchToken = () => async dispatch => {\n  dispatch(requestToken());\n\n  try {\n    const tokenRequest = await fetch(END_POINT);\n    const tokeJSON = await tokenRequest.json();\n    dispatch(requestTokenSuccess(tokeJSON.token));\n    localStorage.setItem('token', tokeJSON.token);\n    const QUESTION_URL = `https://opentdb.com/api.php?amount=5&token=${tokeJSON.token}`;\n\n    try {\n      const questionsRequest = await fetch(QUESTION_URL);\n      const questionsJSON = await questionsRequest.json();\n      dispatch(requestQuestionsSuccess(questionsJSON.results));\n    } catch (e) {\n      dispatch(requestQuestionsError(e));\n    }\n  } catch (e) {\n    dispatch(requestTokenError(e));\n  }\n};\nexport const USERINFOS = 'USERINFOS';\nexport const actionUserInfo = (name, email) => ({\n  type: USERINFOS,\n  name,\n  email\n});","map":{"version":3,"sources":["/home/luisffg/Projetos/sd-012-project-trivia-react-redux/src/redux/actions/index.js"],"names":["REQUEST_TOKEN","REQUEST_TOKEN_SUCCESS","REQUEST_TOKEN_ERROR","REQUEST_QUESTIONS","REQUEST_QUESTIONS_SUCCESS","REQUEST_QUESTIONS_ERROR","requestToken","type","requestTokenSuccess","value","payload","requestTokenError","error","requestQuestions","requestQuestionsSuccess","requestQuestionsError","END_POINT","fetchToken","dispatch","tokenRequest","fetch","tokeJSON","json","token","localStorage","setItem","QUESTION_URL","questionsRequest","questionsJSON","results","e","USERINFOS","actionUserInfo","name","email"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,yBAAyB,GAAG,2BAAlC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AAEP,OAAO,MAAMC,YAAY,GAAG,OAAO;AACjCC,EAAAA,IAAI,EAAEP;AAD2B,CAAP,CAArB;AAIP,OAAO,MAAMQ,mBAAmB,GAAIC,KAAD,KAAY;AAC7CF,EAAAA,IAAI,EAAEN,qBADuC;AAChBS,EAAAA,OAAO,EAAED;AADO,CAAZ,CAA5B;AAIP,OAAO,MAAME,iBAAiB,GAAIC,KAAD,KAAY;AAC3CL,EAAAA,IAAI,EAAEL,mBADqC;AAChBQ,EAAAA,OAAO,EAAEE;AADO,CAAZ,CAA1B;AAIP,OAAO,MAAMC,gBAAgB,GAAG,OAAO;AACrCN,EAAAA,IAAI,EAAEJ;AAD+B,CAAP,CAAzB;AAIP,OAAO,MAAMW,uBAAuB,GAAIL,KAAD,KAAY;AACjDF,EAAAA,IAAI,EAAEH,yBAD2C;AAChBM,EAAAA,OAAO,EAAED;AADO,CAAZ,CAAhC;AAIP,OAAO,MAAMM,qBAAqB,GAAIH,KAAD,KAAY;AAC/CL,EAAAA,IAAI,EAAEF,uBADyC;AAChBK,EAAAA,OAAO,EAAEE;AADO,CAAZ,CAA9B;AAIP,MAAMI,SAAS,GAAG,mDAAlB,C,CAEA;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAClDA,EAAAA,QAAQ,CAACZ,YAAY,EAAb,CAAR;;AACA,MAAI;AACF,UAAMa,YAAY,GAAG,MAAMC,KAAK,CAACJ,SAAD,CAAhC;AACA,UAAMK,QAAQ,GAAG,MAAMF,YAAY,CAACG,IAAb,EAAvB;AACAJ,IAAAA,QAAQ,CAACV,mBAAmB,CAACa,QAAQ,CAACE,KAAV,CAApB,CAAR;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,QAAQ,CAACE,KAAvC;AACA,UAAMG,YAAY,GAAI,8CAA6CL,QAAQ,CAACE,KAAM,EAAlF;;AACA,QAAI;AACF,YAAMI,gBAAgB,GAAG,MAAMP,KAAK,CAACM,YAAD,CAApC;AACA,YAAME,aAAa,GAAG,MAAMD,gBAAgB,CAACL,IAAjB,EAA5B;AACAJ,MAAAA,QAAQ,CAACJ,uBAAuB,CAACc,aAAa,CAACC,OAAf,CAAxB,CAAR;AACD,KAJD,CAIE,OAAOC,CAAP,EAAU;AACVZ,MAAAA,QAAQ,CAACH,qBAAqB,CAACe,CAAD,CAAtB,CAAR;AACD;AACF,GAbD,CAaE,OAAOA,CAAP,EAAU;AACVZ,IAAAA,QAAQ,CAACP,iBAAiB,CAACmB,CAAD,CAAlB,CAAR;AACD;AACF,CAlBM;AAoBP,OAAO,MAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,MAAMC,cAAc,GAAG,CAACC,IAAD,EAAOC,KAAP,MAAkB;AAAE3B,EAAAA,IAAI,EAAEwB,SAAR;AAAmBE,EAAAA,IAAnB;AAAyBC,EAAAA;AAAzB,CAAlB,CAAvB","sourcesContent":["export const REQUEST_TOKEN = 'REQUEST_TOKEN';\nexport const REQUEST_TOKEN_SUCCESS = 'REQUEST_TOKEN_SUCCESS';\nexport const REQUEST_TOKEN_ERROR = 'REQUEST_TOKEN_ERROR';\nexport const REQUEST_QUESTIONS = 'REQUEST_QUESTIONS';\nexport const REQUEST_QUESTIONS_SUCCESS = 'REQUEST_QUESTIONS_SUCCESS';\nexport const REQUEST_QUESTIONS_ERROR = 'REQUEST_QUESTIONS_ERROR';\n\nexport const requestToken = () => ({\n  type: REQUEST_TOKEN,\n});\n\nexport const requestTokenSuccess = (value) => ({\n  type: REQUEST_TOKEN_SUCCESS, payload: value,\n});\n\nexport const requestTokenError = (error) => ({\n  type: REQUEST_TOKEN_ERROR, payload: error,\n});\n\nexport const requestQuestions = () => ({\n  type: REQUEST_QUESTIONS,\n});\n\nexport const requestQuestionsSuccess = (value) => ({\n  type: REQUEST_QUESTIONS_SUCCESS, payload: value,\n});\n\nexport const requestQuestionsError = (error) => ({\n  type: REQUEST_QUESTIONS_ERROR, payload: error,\n});\n\nconst END_POINT = 'https://opentdb.com/api_token.php?command=request';\n\n// Solução proposta pelo Rodrigo Merlone - Turma 12\nexport const fetchToken = () => async (dispatch) => {\n  dispatch(requestToken());\n  try {\n    const tokenRequest = await fetch(END_POINT);\n    const tokeJSON = await tokenRequest.json();\n    dispatch(requestTokenSuccess(tokeJSON.token));\n    localStorage.setItem('token', tokeJSON.token);\n    const QUESTION_URL = `https://opentdb.com/api.php?amount=5&token=${tokeJSON.token}`;\n    try {\n      const questionsRequest = await fetch(QUESTION_URL);\n      const questionsJSON = await questionsRequest.json();\n      dispatch(requestQuestionsSuccess(questionsJSON.results));\n    } catch (e) {\n      dispatch(requestQuestionsError(e));\n    }\n  } catch (e) {\n    dispatch(requestTokenError(e));\n  }\n};\n\nexport const USERINFOS = 'USERINFOS';\nexport const actionUserInfo = (name, email) => ({ type: USERINFOS, name, email });\n"]},"metadata":{},"sourceType":"module"}